---
interface Props {
  variant?: "default" | "accent" | "muted" | "none";
  size?: "xxs" | "xs" | "sm" | "base" | "md" | "lg" | "xl";
  gap?: "xs" | "sm" | "base" | "md" | "lg";
  iconOnly?: boolean;
  isLink?: boolean;
  class?: string;
  href?: string;
  [key: string]: any;
}

const {
  variant = "default",
  size = "base",
  gap = "base",
  iconOnly = false,
  isLink = false,
  class: className = "",
  ...rest
} = Astro.props as Props;

// Style variants
const variantClass = {
  default: [
    "text-white",
    "bg-base-900",
    "outline",
    "outline-base-900",
    "hover:bg-base-800",
    "focus:outline-base-800",
    "shadow-sm",
  ],
  accent: [
    "text-accent-950",
    "bg-accent-200",
    "outline",
    "outline-accent-200",
    "hover:bg-accent-400",
    "focus:outline-accent-400",
    "shadow-sm",
  ],
  muted: [
    "text-base-600",
    "bg-base-100",
    "outline",
    "outline-base-50",
    "hover:bg-base-200",
    "focus:outline-base-600",
  ],
  none: [],
};

// Sizes
const sizes = {
  xxs: ["h-7.5", "px-5", "py-2", "text-xs"],
  xs: ["h-8", "px-6", "py-3", "text-xs"],
  sm: ["h-9", "px-6", "py-3", "text-sm"],
  base: ["h-10", "px-8", "py-4", "text-sm"],
  md: ["h-11", "px-8", "py-4", "text-base"],
  lg: ["h-12", "px-8", "py-4", "text-lg"],
  xl: ["h-13", "px-8", "py-4", "text-lg"],
};

const iconSizes = {
  xxs: ["size-7.5", "py-2", "text-xs"],
  xs: ["size-8", "text-xs"],
  sm: ["size-9", "text-sm"],
  base: ["size-10", "text-sm"],
  md: ["size-11", "text-md"],
  lg: ["size-12", "text-lg"],
  xl: ["size-13", "text-lg"],
};

// Gaps
const gapMap = {
  xs: ["gap-2"],
  sm: ["gap-4"],
  base: ["gap-8"],
  md: ["gap-10"],
  lg: ["gap-12"],
};

// Final class computation
const sizeClass = iconOnly ? (iconSizes[size] ?? []) : (sizes[size] ?? []);
const gapClass = !iconOnly ? (gapMap[gap] ?? []) : [];
const additionalClasses = className.split(" ");
const baseClass = [
  "flex",
  "font-medium",
  "ease-in-out",
  "text-center",
  "items-center",
  "duration-500",
  "rounded-full",
  "transition-all",
  "focus:outline-2",
  "justify-center",
  "focus:outline-offset-2",
];
const allClasses = [
  ...baseClass,
  ...(variantClass[variant] ?? []),
  ...sizeClass,
  ...gapClass,
  ...additionalClasses,
];
---

{
  isLink ? (
    <a href={rest.href ?? "#"} class:list={allClasses} {...rest}>
      {iconOnly ? (
        <slot name="icon" />
      ) : (
        <>
          <slot name="left-icon" />
          <slot />
          <slot name="right-icon" />
        </>
      )}
    </a>
  ) : (
    <button class:list={allClasses} type="button" {...rest}>
      {iconOnly ? (
        <slot name="icon" />
      ) : (
        <>
          <slot name="left-icon" />
          <slot />
          <slot name="right-icon" />
        </>
      )}
    </button>
  )
}
